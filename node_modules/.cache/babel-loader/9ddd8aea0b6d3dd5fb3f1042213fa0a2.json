{"ast":null,"code":"import _classCallCheck from \"/Users/ozzieharb/Projects/noteful-fullstack/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ozzieharb/Projects/noteful-fullstack/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ozzieharb/Projects/noteful-fullstack/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ozzieharb/Projects/noteful-fullstack/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ozzieharb/Projects/noteful-fullstack/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ozzieharb/Projects/noteful-fullstack/src/AddNote.js\";\nimport React from 'react';\nimport NotesContext from './NotesContext';\nimport config from './config';\nimport './AddNote.css';\nimport NotefulForm from './NotefulForm/NotefulForm';\nimport PropTypes from 'prop-types';\n\nvar AddNote =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddNote, _React$Component);\n\n  function AddNote() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AddNote);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AddNote)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      name: {\n        value: '',\n        touched: false\n      },\n      folder: {\n        value: ''\n      }\n    };\n\n    _this.setName = function (name) {\n      _this.setState({\n        name: {\n          value: name,\n          touched: true\n        }\n      }); // Switch touched to true\n\n    };\n\n    _this.validateName = function () {\n      var name = _this.state.name.value;\n\n      if (name.length <= 0) {\n        return '(Please name your note)';\n      }\n    };\n\n    _this.setFolder = function (folder) {\n      _this.setState({\n        folder: {\n          value: folder\n        }\n      });\n    };\n\n    _this.validateFolder = function () {\n      var folder = _this.state.folder.value;\n\n      if (folder === '') {\n        return '(Please choose a folder)';\n      } else if (folder === 'choose folder') {\n        return \"(Please choose a folder)\";\n      }\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n      var newNote = {\n        name: e.target['note-name'].value,\n        modified: new Date(),\n        folderId: e.target['note-folder'].value,\n        content: e.target['note-content'].value\n      };\n      fetch(\"\".concat(config.API_ENDPOINT, \"/notes\"), {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify(newNote)\n      }).then(function (res) {\n        if (!res.ok) {\n          return res.json().then(function (e) {\n            return Promise.reject(e);\n          });\n        }\n\n        return res.json();\n      }).then(function (data) {\n        console.log(data.folderId);\n\n        _this.context.addNote(data);\n\n        _this.props.history.push(\"/folder/\".concat(data.folderId));\n      }).catch(function (error) {\n        console.error({\n          error: error\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AddNote, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$context$folders = this.context.folders,\n          folders = _this$context$folders === void 0 ? [] : _this$context$folders;\n      return React.createElement(\"section\", {\n        className: \"add-note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Make Note\"), React.createElement(NotefulForm, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"note-name-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Name\", React.createElement(\"p\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, this.validateName())), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"note-name-input\",\n        name: \"note-name\",\n        value: this.state.name.value,\n        onChange: function onChange(e) {\n          return _this2.setName(e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"note-form-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Content\"), React.createElement(\"input\", {\n        id: \"note-form-content\",\n        name: \"note-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"note-form-folder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Folder\", React.createElement(\"p\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, this.validateFolder())), React.createElement(\"select\", {\n        id: \"note-form-folder\",\n        name: \"note-folder\",\n        value: this.state.folder.value,\n        onChange: function onChange(e) {\n          return _this2.setFolder(e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"choose folder\"), folders.map(function (folder) {\n        return React.createElement(\"option\", {\n          value: folder.id,\n          key: folder.id,\n          id: folder.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, folder.name);\n      })), React.createElement(\"button\", {\n        className: \"buttons\",\n        type: \"submit\",\n        disabled: this.validateName() || this.validateFolder(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Done\")));\n    }\n  }]);\n\n  return AddNote;\n}(React.Component);\n\nAddNote.contextType = NotesContext;\nAddNote.defaultProps = {\n  history: {\n    push: function push() {}\n  }\n};\nexport { AddNote as default };\nAddNote.defaultProps = {\n  name: \"\",\n  folder: \"\"\n};\nAddNote.propTypes = {\n  name: PropTypes.string.isRequired,\n  folder: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["/Users/ozzieharb/Projects/noteful-fullstack/src/AddNote.js"],"names":["React","NotesContext","config","NotefulForm","PropTypes","AddNote","state","name","value","touched","folder","setName","setState","validateName","length","setFolder","validateFolder","handleSubmit","e","preventDefault","newNote","target","modified","Date","folderId","content","fetch","API_ENDPOINT","method","headers","body","JSON","stringify","then","res","ok","json","Promise","reject","data","console","log","context","addNote","props","history","push","catch","error","folders","map","id","Component","contextType","defaultProps","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React from 'react'\nimport NotesContext from './NotesContext'\nimport config from './config'\nimport './AddNote.css'\nimport NotefulForm from './NotefulForm/NotefulForm'\nimport PropTypes from 'prop-types';\n\nexport default class AddNote  extends React.Component{\n    state = {\n        name: {value: '', touched: false},\n        folder: {value: ''}\n    \n    };\n    setName = name => {\n        this.setState({name: {value: name, touched: true}}); // Switch touched to true\n    };\n    validateName = () => {\n      let name = this.state.name.value;\n     \n            if (name.length <= 0) {\n              \n                return '(Please name your note)';\n    }\n    }\n    setFolder = folder => {\n      this.setState({folder: {value: folder}})\n    }\n    validateFolder = () => {\n     let folder = this.state.folder.value;\n     if (folder === ''){\n      return '(Please choose a folder)'\n     } else if (folder === 'choose folder'){\n       return \"(Please choose a folder)\"\n     }\n    \n     }\n     \n    \nstatic contextType = NotesContext;\n\nstatic defaultProps = {\n    history: {\n        push: () => {}\n    },\n}\n\nhandleSubmit = e => {\n    e.preventDefault()\n    const newNote= {\n        name: e.target['note-name'].value,\n        modified: new Date(),\n        folderId: e.target['note-folder'].value,\n        content: e.target['note-content'].value\n    }\n    fetch(`${config.API_ENDPOINT}/notes`, \n    {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n          },\n        body: JSON.stringify(newNote)\n    })\n    .then(res => {\n        if(!res.ok){\n        return res.json().then(e=>Promise.reject(e))\n        }\n        return res.json()\n    })\n    .then( data =>{\n        console.log(data.folderId)\n        this.context.addNote(data)\n        this.props.history.push(`/folder/${data.folderId}`)})\n    .catch( error => {\n        console.error({ error })\n    })\n}\n\nrender(){\n    const {folders = []}=this.context\n\n    return(\n        <section className='add-note'>\n            <h2>Make Note</h2>\n            <NotefulForm onSubmit={this.handleSubmit}>\n            <label htmlFor='note-name-input'>\n                Name\n                 \n                   { <p className=\"error\">{this.validateName()}</p>}\n            </label>\n            <input type='text' id='note-name-input' name='note-name' \n            value={this.state.name.value}\n            onChange={e => this.setName(e.target.value)}/>\n            <label htmlFor='note-form-content'>\n                Content\n               </label>  \n                <input id = 'note-form-content' name = \"note-content\"/>\n           \n            <label htmlFor='note-form-folder'>\n                Folder\n            {<p className=\"error\">{this.validateFolder()}</p>}\n                 </label>\n                <select id='note-form-folder' name = \"note-folder\" value={this.state.folder.value}\n            onChange={e => this.setFolder(e.target.value)}>\n                    <option value = {null}>choose folder</option>\n                    {folders.map(folder=>\n                        <option value = {folder.id} key = {folder.id} id={folder.id}>{folder.name}</option> )}\n                </select>\n           \n            <button className='buttons' type = \"submit\" disabled={this.validateName()|| this.validateFolder()}>Done</button>\n          \n         </NotefulForm>\n        </section>\n\n\n    )\n}\n}\nAddNote.defaultProps = {\n    name: \"\",\n    folder: \"\"\n}\nAddNote.propTypes = {\n    name: PropTypes.string.isRequired,\n    folder: PropTypes.string.isRequired\n  }"]},"metadata":{},"sourceType":"module"}